%!PS-Adobe-2.0 EPSF-2.0
%%Title: two_layer_interface_axisym-time_trace.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Oct  8 15:15:34 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
798 420 M
63 0 V
6101 0 R
-63 0 V
stroke
714 420 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.85)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 1056 M
63 0 V
6101 0 R
-63 0 V
stroke
714 1056 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.9)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 1692 M
63 0 V
6101 0 R
-63 0 V
stroke
714 1692 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.95)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 2328 M
63 0 V
6101 0 R
-63 0 V
stroke
714 2328 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 1)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 2964 M
63 0 V
6101 0 R
-63 0 V
stroke
714 2964 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.05)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 3600 M
63 0 V
6101 0 R
-63 0 V
stroke
714 3600 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.1)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 4236 M
63 0 V
6101 0 R
-63 0 V
stroke
714 4236 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.15)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 4872 M
63 0 V
6101 0 R
-63 0 V
stroke
714 4872 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 1.2)]
] -46.7 MRshow
grestore
1.000 UL
LTb
798 420 M
0 63 V
0 4389 R
0 -63 V
stroke
798 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1569 420 M
0 63 V
0 4389 R
0 -63 V
stroke
1569 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.1)]
] -46.7 MCshow
grestore
1.000 UL
LTb
2339 420 M
0 63 V
0 4389 R
0 -63 V
stroke
2339 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.2)]
] -46.7 MCshow
grestore
1.000 UL
LTb
3110 420 M
0 63 V
0 4389 R
0 -63 V
stroke
3110 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.3)]
] -46.7 MCshow
grestore
1.000 UL
LTb
3880 420 M
0 63 V
0 4389 R
0 -63 V
stroke
3880 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.4)]
] -46.7 MCshow
grestore
1.000 UL
LTb
4651 420 M
0 63 V
0 4389 R
0 -63 V
stroke
4651 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.5)]
] -46.7 MCshow
grestore
1.000 UL
LTb
5421 420 M
0 63 V
0 4389 R
0 -63 V
stroke
5421 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.6)]
] -46.7 MCshow
grestore
1.000 UL
LTb
6192 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6192 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.7)]
] -46.7 MCshow
grestore
1.000 UL
LTb
6962 420 M
0 63 V
0 4389 R
0 -63 V
stroke
6962 280 M
gsave 0 setgray
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.8)]
] -46.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
798 420 M
6164 0 V
0 4452 V
-6164 0 V
798 420 L
LTb
140 2646 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Bold) 160.0 0.0 true true 0 (height of interface at left-hand edge of domain \(x=0\))]
] -53.3 MCshow
grestore
grestore
LTb
3880 70 M
gsave 0 setgray
[ [(Bold) 160.0 0.0 true true 0 (time)]
] -53.3 MCshow
grestore
0.800 UP
0.800 UP
1.000 UL
LT0
798 4872 M
39 -70 V
38 -157 V
39 -235 V
38 -301 V
39 -357 V
38 -405 V
39 -442 V
38 -453 V
39 -432 V
38 -377 V
39 -297 V
38 -206 V
39 -111 V
38 -24 V
39 54 V
38 123 V
39 178 V
38 219 V
39 246 V
39 253 V
38 243 V
39 217 V
38 181 V
39 137 V
38 90 V
39 43 V
38 1 V
39 -39 V
38 -70 V
39 -96 V
38 -113 V
39 -122 V
38 -124 V
39 -118 V
38 -106 V
39 -90 V
38 -71 V
39 -48 V
38 -26 V
39 -5 V
39 16 V
38 32 V
39 47 V
38 56 V
39 62 V
38 65 V
39 61 V
38 57 V
39 48 V
38 38 V
39 26 V
38 15 V
39 3 V
38 -7 V
39 -16 V
38 -23 V
39 -27 V
38 -30 V
39 -30 V
39 -28 V
38 -25 V
39 -21 V
38 -14 V
39 -9 V
38 -4 V
39 3 V
38 7 V
39 11 V
38 14 V
39 16 V
38 16 V
39 17 V
38 14 V
39 13 V
38 10 V
39 8 V
38 4 V
39 0 V
38 -2 V
39 -5 V
39 -7 V
38 -8 V
39 -10 V
38 -10 V
39 -10 V
38 -9 V
39 -8 V
38 -7 V
39 -5 V
38 -3 V
39 -2 V
38 -1 V
39 1 V
38 2 V
39 3 V
38 4 V
39 3 V
38 4 V
39 4 V
39 3 V
38 2 V
39 2 V
38 1 V
39 0 V
stroke
4805 2329 M
38 0 V
39 0 V
38 -2 V
39 -1 V
38 -1 V
39 -2 V
38 -1 V
39 -1 V
38 -1 V
39 -1 V
38 1 V
39 0 V
38 1 V
39 1 V
38 1 V
39 2 V
39 2 V
38 2 V
39 2 V
38 1 V
39 2 V
38 1 V
39 1 V
38 1 V
39 0 V
38 0 V
39 0 V
38 0 V
39 -1 V
38 0 V
39 -1 V
38 -1 V
39 -1 V
38 -1 V
39 0 V
39 -1 V
38 -1 V
39 0 V
38 -1 V
39 0 V
38 0 V
39 -1 V
38 0 V
39 0 V
38 0 V
39 0 V
38 -1 V
39 0 V
38 0 V
39 0 V
38 -1 V
39 0 V
38 0 V
39 -1 V
38 0 V
39 0 V
798 4872 Box
837 4802 Box
875 4645 Box
914 4410 Box
952 4109 Box
991 3752 Box
1029 3347 Box
1068 2905 Box
1106 2452 Box
1145 2020 Box
1183 1643 Box
1222 1346 Box
1260 1140 Box
1299 1029 Box
1337 1005 Box
1376 1059 Box
1414 1182 Box
1453 1360 Box
1491 1579 Box
1530 1825 Box
1569 2078 Box
1607 2321 Box
1646 2538 Box
1684 2719 Box
1723 2856 Box
1761 2946 Box
1800 2989 Box
1838 2990 Box
1877 2951 Box
1915 2881 Box
1954 2785 Box
1992 2672 Box
2031 2550 Box
2069 2426 Box
2108 2308 Box
2146 2202 Box
2185 2112 Box
2223 2041 Box
2262 1993 Box
2300 1967 Box
2339 1962 Box
2378 1978 Box
2416 2010 Box
2455 2057 Box
2493 2113 Box
2532 2175 Box
2570 2240 Box
2609 2301 Box
2647 2358 Box
2686 2406 Box
2724 2444 Box
2763 2470 Box
2801 2485 Box
2840 2488 Box
2878 2481 Box
2917 2465 Box
2955 2442 Box
2994 2415 Box
3032 2385 Box
3071 2355 Box
3110 2327 Box
3148 2302 Box
3187 2281 Box
3225 2267 Box
3264 2258 Box
3302 2254 Box
3341 2257 Box
3379 2264 Box
3418 2275 Box
3456 2289 Box
3495 2305 Box
3533 2321 Box
3572 2338 Box
3610 2352 Box
3649 2365 Box
3687 2375 Box
3726 2383 Box
3764 2387 Box
3803 2387 Box
3841 2385 Box
3880 2380 Box
3919 2373 Box
3957 2365 Box
3996 2355 Box
4034 2345 Box
4073 2335 Box
4111 2326 Box
4150 2318 Box
4188 2311 Box
4227 2306 Box
4265 2303 Box
4304 2301 Box
4342 2300 Box
4381 2301 Box
4419 2303 Box
4458 2306 Box
4496 2310 Box
4535 2313 Box
4573 2317 Box
4612 2321 Box
4651 2324 Box
4689 2326 Box
4728 2328 Box
4766 2329 Box
4805 2329 Box
4843 2329 Box
4882 2329 Box
4920 2327 Box
4959 2326 Box
4997 2325 Box
5036 2323 Box
5074 2322 Box
5113 2321 Box
5151 2320 Box
5190 2319 Box
5228 2320 Box
5267 2320 Box
5305 2321 Box
5344 2322 Box
5382 2323 Box
5421 2325 Box
5460 2327 Box
5498 2329 Box
5537 2331 Box
5575 2332 Box
5614 2334 Box
5652 2335 Box
5691 2336 Box
5729 2337 Box
5768 2337 Box
5806 2337 Box
5845 2337 Box
5883 2337 Box
5922 2336 Box
5960 2336 Box
5999 2335 Box
6037 2334 Box
6076 2333 Box
6114 2332 Box
6153 2332 Box
6192 2331 Box
6230 2330 Box
6269 2330 Box
6307 2329 Box
6346 2329 Box
6384 2329 Box
6423 2328 Box
6461 2328 Box
6500 2328 Box
6538 2328 Box
6577 2328 Box
6615 2327 Box
6654 2327 Box
6692 2327 Box
6731 2327 Box
6769 2326 Box
6808 2326 Box
6846 2326 Box
6885 2325 Box
6923 2325 Box
6962 2325 Box
1.000 UL
LTb
798 420 M
6164 0 V
0 4452 V
-6164 0 V
798 420 L
0.800 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Bold Helvetica
