//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS_pt FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for Helmholtz elements
#ifndef OOMPH_GENERALISED_HELMHOLTZ_ELEMENTS_HEADER
#define OOMPH_GENERALISED_HELMHOLTZ_ELEMENTS_HEADER 

 
// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif


//OOMPH-LIB headers 
#include "../generic/nodes.h"  
#include "../generic/Qelements.h" 
#include "../generic/oomph_utilities.h"
#include "math.h"
#include <complex>

// The meshes (needed for building of pml meshes!)
#include "../meshes/triangle_mesh.h"
#include "../meshes/rectangular_quadmesh.h"


////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

namespace oomph
{

//===================================================================
/// \short All helper routines for bulk boundary mesh usage in order to 
/// generate PML meshes aligned to the main mesh
//===================================================================
namespace PMLHelper
{
 /// helper function for sorting the right boundary nodes
 extern bool sorter_right_boundary(Node* nod_i_pt, Node* nod_j_pt);
 
 /// helper function for sorting the top boundary nodes
 extern bool sorter_top_boundary(Node* nod_i_pt, Node* nod_j_pt);
 
 /// helper function for sorting the left boundary nodes
 extern bool sorter_left_boundary(Node* nod_i_pt, Node* nod_j_pt);

 /// helper function for sorting the bottom boundary nodes
 extern bool sorter_bottom_boundary(Node* nod_i_pt, Node* nod_j_pt);


 /// "Constructor" for PML mesh,aligned with the right physical domain boundary
 extern Mesh* create_right_pml_mesh(Mesh* bulk_mesh_pt,
                                    const unsigned& right_boundary_id,
                                    const unsigned& n_x_right_pml,
                                    const double& l_x_right_pml);
 
 /// "Constructor" for PML mesh, aligned with the top physical domain boundary
 extern Mesh* create_top_pml_mesh(Mesh* bulk_mesh_pt,
                                  const unsigned& top_boundary_id,
                                  const unsigned& n_y_top_pml,
                                  const double& l_y_top_pml);

 /// "Constructor" for PML mesh, aligned with the left physical domain boundary
 extern Mesh* create_left_pml_mesh(Mesh* bulk_mesh_pt,
                                   const unsigned& left_boundary_id,
                                   const unsigned& n_x_left_pml,
                                   const double& l_x_left_pml);

 ///"Constructor" for PML mesh,aligned with the bottom physical domain boundary
 extern Mesh* create_bottom_pml_mesh(Mesh* bulk_mesh_pt,
                                     const unsigned& bottom_boundary_id,
                                     const unsigned& n_y_bottom_pml,
                                     const double& l_y_bottom_pml);

 /// \short "Constructor" for PML top right corner mesh,
 /// aligned with the existing PML meshes
 extern Mesh* create_top_right_pml_mesh(Mesh* pml_right_mesh_pt, 
                                        Mesh* pml_top_mesh_pt, 
                                        Mesh* bulk_mesh_pt,
                                        const unsigned& right_boundary_id);

 /// \short  "Constructor" for PML bottom right corner mesh, 
 /// aligned with the existing PML meshes
 extern Mesh* create_bottom_right_pml_mesh(Mesh* pml_right_mesh_pt, 
                                           Mesh* pml_bottom_mesh_pt, 
                                           Mesh* bulk_mesh_pt,
                                           const unsigned& right_boundary_id);

 /// \short "Constructor" for PML top left corner mesh, 
 /// aligned with the existing PML meshes
 extern Mesh* create_top_left_pml_mesh(Mesh* pml_left_mesh_pt, 
                                       Mesh* pml_top_mesh_pt, 
                                       Mesh* bulk_mesh_pt,
                                       const unsigned& left_boundary_id);

 /// \short "Constructor" for PML bottom left corner mesh, 
 /// aligned with the existing PML meshes
 extern Mesh* create_bottom_left_pml_mesh(Mesh* pml_left_mesh_pt, 
                                          Mesh* pml_bottom_mesh_pt, 
                                          Mesh* bulk_mesh_pt,
                                          const unsigned& left_boundary_id);

}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//==============================================================
/// Template free base class for GeneralisedHelmholtz elements
//==============================================================
template<unsigned DIM>
class GeneralisedHelmholtzBase
{

  public:

 /// Constructor. Assign defaults
 GeneralisedHelmholtzBase() : Pml_is_enabled(false), 
  Pml_orientation(DIM,false), Pml_inner_boundary(DIM,0.0),
  Pml_outer_boundary(DIM,0.0)
   {}
  
 /// Broken copy constructor
 GeneralisedHelmholtzBase(
  const GeneralisedHelmholtzBase& dummy) 
  { 
   BrokenCopy::broken_copy("GeneralisedHelmholtzBase");
  } 
 
 /// Broken assignment operator
 void operator=(const GeneralisedHelmholtzBase&) 
  {
   BrokenCopy::broken_assign("GeneralisedHelmholtzBase");
  }

 /// \short Enable pml. Specify the coordinate direction along which 
 /// pml boundary is constant, as well as the coordinate
 /// along the dimension for the interface between the physical and artificial
 /// domains and the coordinate for the outer boundary.
 /// All of these are used to adjust the perfectly matched layer
 /// mechanism. 
 /// Important: there may be more than one reference boundary 
 /// per dimension, hence this
 /// needs to be stored element-wise.
 void enable_pml(const int& direction, const double& interface_border_value, 
                 const double& outer_domain_border_value)
 {
  Pml_is_enabled=true;
  Pml_orientation[direction] = true;
  Pml_inner_boundary[direction] = interface_border_value;
  Pml_outer_boundary[direction] = outer_domain_border_value;
 }

  protected:

 /// Boolean indicating if element is used in pml mode
 bool Pml_is_enabled;

 /// Coordinate direction along which pml boundary is constant
 std::vector<bool> Pml_orientation;

 /// Coordinate of inner pml boundary (x1_{PML_direction} = Pml_inner_boundary)
 Vector<double> Pml_inner_boundary;

 /// Coordinate of outer pml boundary (x2_{PML_direction} = Pml_outer_boundary)
 Vector<double> Pml_outer_boundary;
};

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


//====================================================================
/// PML mesh, derived from RectangularQuadMesh.
//====================================================================
template<class ELEMENT>
class PMLQuadMesh : public RectangularQuadMesh<ELEMENT>
{

  public:

  /// \short Constructor: Pass pointer to unstructured "bulk" mesh,
  /// the boundary ID of axis aligned boundary to which the
  /// mesh is supposed to be attached and flag indicating which
  /// coordinate is constant (-2: constant x, bulk mesh to the right,
  /// -1: constant y, bulk mesh above; 1: constant x, bulk mesh to left;
  /// 2: constant y, bulk mesh below.
  PMLQuadMesh(Mesh* triangle_mesh_pt, 
              const unsigned& boundary_id, const unsigned& quad_boundary_id, 
              const unsigned& n_pml_x, const unsigned& n_pml_y,
              const double& x_pml_start, const double& x_pml_end, 
              const double& y_pml_start, const double& y_pml_end):
    RectangularQuadMesh<ELEMENT>(n_pml_x,n_pml_y,
                                 x_pml_start,x_pml_end,
                                 y_pml_start,y_pml_end)
  {
   unsigned n_boundary_node = triangle_mesh_pt -> nboundary_node(boundary_id);
 
   // Create a vector of ordered boundary nodes
   Vector<Node*> ordered_boundary_node_pt(n_boundary_node);

   // Fill the vector with the nodes on the respective boundary
   for (unsigned n=0; n<n_boundary_node; n++)
    {
     ordered_boundary_node_pt[n] = 
      triangle_mesh_pt -> boundary_node_pt(boundary_id, n);
    }

   /// Sort them depending on the boundary being used
   
   // Right boundary
   if (boundary_id == 4)
    {
     std::sort(ordered_boundary_node_pt.begin(),
               ordered_boundary_node_pt.end(),
               PMLHelper::sorter_right_boundary);
   }

   /// Top boundary
   if (boundary_id == 3)
    {
     std::sort(ordered_boundary_node_pt.begin(),
               ordered_boundary_node_pt.end(),
               PMLHelper::sorter_top_boundary);
   }

   /// Left boundary
   if (boundary_id == 2)
    {
     std::sort(ordered_boundary_node_pt.begin(),
               ordered_boundary_node_pt.end(),
                PMLHelper::sorter_left_boundary);
   }

   /// Bottom boundary
   if (boundary_id == 5)
    {
     std::sort(ordered_boundary_node_pt.begin(),
               ordered_boundary_node_pt.end(),
                PMLHelper::sorter_bottom_boundary);
   }

   unsigned nnode_1d = this->finite_element_pt(0)->nnode_1d();
   
   /// \short Simple interior node numbering helpers
   /// to be precomputed before the main loop

   /// Top left node in element
   unsigned interior_node_nr_helper_1 = nnode_1d * (nnode_1d - 1);
   /// Lower right node in element
   unsigned interior_node_nr_helper_2 = nnode_1d - 1;
   /// Used to find nodes in top row
   unsigned interior_node_nr_helper_3 = nnode_1d * (nnode_1d - 1) - 1;

   /// \short Set all nodes from the PML mesh that must disappear
   /// after merging as obsolete
   unsigned nnod = this -> nboundary_node(quad_boundary_id);
   for (unsigned j=0;j<nnod;j++)
    {
     this -> boundary_node_pt(quad_boundary_id,j)->set_obsolete();
    }
   
   // Kill the obsolete nodes
   this -> prune_dead_nodes();
   
   // Find the number of elements inside the PML mesh
   unsigned n_pml_element = this -> nelement();

   /// Simple interior element numbering helpers

   /// Last element in mesh (top right)
   unsigned interior_element_nr_helper_1 = n_pml_element-1;

 
   // Connect the elements in the pml mesh to the ones
   // in the triangular mesh at element level
   unsigned count = 0;

   // Each boundary requires a specific treatment
   // Right boundary
   if (boundary_id == 4) {
    for(unsigned e=0; e<n_pml_element; e++)
     {
      // If element is on the right boundary
      if ((e % n_pml_x) == 0) 
       {        
        // Upcast from GeneralisedElement to Helmholtz bulk element
        ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
         this -> element_pt(e));
       
        // Loop over all nodes in element
        unsigned n_node = el_pt -> nnode();
        for (unsigned inod = 0; inod<n_node; inod++)
         {
          if (inod % nnode_1d == 0 )
           {
            // Get the pointer from the triangular mesh
            el_pt->node_pt(inod) = ordered_boundary_node_pt[count];
            count++;

            // Node between two elements
            if (inod == interior_node_nr_helper_1) {count--;} 
           } 
         }
       } 
     }
   }

   // Top boundary
   if (boundary_id == 3) {
    for(unsigned e=0; e<n_pml_element; e++)
     {
      // If element is on the right boundary
      if ((int)(e / n_pml_x) == 0) 
       {        
        // Upcast from GeneralisedElement to Helmholtz bulk element
        ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
         this -> element_pt(e));
       
        // Loop over all nodes in element
        unsigned n_node = el_pt -> nnode();
        for (unsigned inod = 0; inod<n_node; inod++)
         {
          if ((int) (inod / nnode_1d) == 0 )
           {
            // Get the pointer from the triangular mesh
            el_pt->node_pt(inod) = ordered_boundary_node_pt[count];
            count++;

            // Node between two elements
            if (inod == interior_node_nr_helper_2) {count--;} 
           } 
         }
       } 
     }
   }

   // Left boundary
   if (boundary_id == 2) {
    for(unsigned e=interior_element_nr_helper_1; e < n_pml_element; e--)
     {
      // If element is on the right boundary
      if ((e % n_pml_x) == (n_pml_x-1)) 
       {        
        // Upcast from GeneralisedElement to Helmholtz bulk element
        ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
         this -> element_pt(e));
       
        // Loop over all nodes in element
        unsigned n_node = el_pt -> nnode();
        unsigned starter = n_node-1;
        for (unsigned inod = starter; inod<=starter; inod--)
         {
          if (inod % nnode_1d == interior_node_nr_helper_2 )
           {
            // Get the pointer from the triangular mesh
            el_pt->node_pt(inod) = ordered_boundary_node_pt[count];
            count++;

            // Node between two elements
            if (inod == interior_node_nr_helper_2) {count--;} 
           } 
         }
       } 
     }
   }

   // Bottom boundary
   if (boundary_id == 5) {
    for(unsigned e=interior_element_nr_helper_1; e < n_pml_element; e--)
     {
      // If element is on the top boundary
      if (e  >= (n_pml_x*(n_pml_y-1))) 
       {        
        // Upcast from GeneralisedElement to Helmholtz bulk element
        ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
         this -> element_pt(e));
       
        // Loop over all nodes in element
        unsigned n_node = el_pt -> nnode();
        unsigned starter = n_node-1;
        for (unsigned inod = starter; inod<=starter; inod--)
         {
          if (inod > interior_node_nr_helper_3 )
           {
            // Get the pointer from the triangular mesh
            el_pt->node_pt(inod) = ordered_boundary_node_pt[count];
            count++;

            // Node between two elements
            if (inod == interior_node_nr_helper_1) {count--;} 
           } 
         }
       } 
     }
   }

   /// \short The alignment is done individually for each boundary
   /// and depends on the ordering of the nodes, in this case of the
   /// RectangularQuadMesh<2,3> for each boundary. There are operations
   /// with mod and div 3 necessary in this case, as well as specific
   /// mechanisms to loop over the boundary in a certain way in order
   /// to obtain the convenient coordinates.

   // Loop over all elements and make sure the coordinates are aligned
   for(unsigned e=0; e<n_pml_element; e++)
    {
     // Upcast from GeneralisedElement to Helmholtz bulk element
     ELEMENT *el_pt = 
      dynamic_cast<ELEMENT* >(this -> element_pt(e));
     unsigned n_node = el_pt -> nnode();
     
     // Loop over all nodes in element
     double temp_coordinate = 0.0;
     for (unsigned inod = 0; inod<n_node; inod++)
      {      
       // Check if we are looking at the left boundary of the quad mesh
       if (quad_boundary_id == 3) {
        // If it is one of the ones on the left boundary
        if (inod % nnode_1d == 0)
         {
          // Get the y-coordinate of the leftmost node in that element
          temp_coordinate = el_pt -> node_pt(inod) -> x(1);
         } 
        
        // Each node's y-coordinate is reset to be the one of the leftmost
        // node in that element on its x-coordinate
        el_pt -> node_pt(inod) -> x(1) = temp_coordinate;
       }
       // End of left quad boundary check
       
       // Check if we are looking at the top boundary of the quad mesh
       if (quad_boundary_id == 0) {
        // If it is one of the ones on the bottom boundary
        if (inod > interior_node_nr_helper_2)
         {
          // Get the y-coordinate of the leftmost node in that element
          el_pt -> node_pt(inod) -> x(0) = 
           el_pt -> node_pt(inod - nnode_1d) -> x(0);
         } 
       }
       // End of top quad boundary check
      }
    }

   for(unsigned e=interior_element_nr_helper_1; e<n_pml_element; e--)
    {
     // Upcast from GeneralisedElement to Helmholtz bulk element
     ELEMENT *el_pt = 
      dynamic_cast<ELEMENT* >(this -> element_pt(e));
     unsigned n_node = el_pt -> nnode();
     
     // Loop over all nodes in element
     double temp_coordinate = 0.0;
     unsigned starter = n_node-1;
     for (unsigned inod = starter; inod <= starter; inod--)
      {      
       // Check if we are looking at the right boundary of the quad mesh
       if (quad_boundary_id == 1) {
        // If it is one of the ones on the left boundary
        if (inod % nnode_1d == interior_node_nr_helper_2)
         {
          // Get the y-coordinate of the leftmost node in that element
          temp_coordinate = el_pt -> node_pt(inod) -> x(1);
         } 
        
        // Each node's y-coordinate is reset to be the one of the leftmost
        // node in that element on its x-coordinate
        el_pt -> node_pt(inod) -> x(1) = temp_coordinate;
       }
       // End of right quad boundary check
       
       // Check if we are looking at the top boundary of the quad mesh
       if (quad_boundary_id == 2) {
        // If it is one of the ones on the bottom boundary
        if (inod < interior_node_nr_helper_1)
         {
          // Get the y-coordinate of the leftmost node in that element
          el_pt -> node_pt(inod) -> x(0) = 
           el_pt -> node_pt(inod + nnode_1d) -> x(0);
         }
     
       }
       // End of top quad boundary check  
      }
    }
   // End of alignment
  }
   
};

//====================================================================
/// PML mesh, derived from RectangularQuadMesh.
//====================================================================
template<class ELEMENT>
class PMLCornerQuadMesh : public RectangularQuadMesh<ELEMENT>
{
  public:

 /// \short Constructor: Pass pointer to unstructured "bulk" mesh
 /// and the two existing PML meshes in order to construct the corner
 /// PML mesh in between them based on their element number
 /// and coordinates.
 PMLCornerQuadMesh(Mesh* PMLQuad_mesh_x_pt, 
                   Mesh* PMLQuad_mesh_y_pt, 
                   Mesh* triangle_mesh_pt, 
                   Node* special_corner_node_pt,
                   const unsigned& parent_boundary_x_id, 
                   const unsigned& parent_boundary_y_id, 
                   const unsigned& current_boundary_x_id, 
                   const unsigned& current_boundary_y_id,  
                   const unsigned& n_pml_x, const unsigned& n_pml_y,
                   const double& x_pml_start, const double& x_pml_end, 
                   const double& y_pml_start, const double& y_pml_end):
  RectangularQuadMesh<ELEMENT>(n_pml_x,n_pml_y,
                               x_pml_start,x_pml_end,
                               y_pml_start,y_pml_end)
  {

   unsigned nnode_1d = this->finite_element_pt(0)->nnode_1d();

   /// \short Simple interior node numbering helpers
   /// to be precomputed before the main loop

   /// Top left node in element
   unsigned interior_node_nr_helper_1 = nnode_1d * (nnode_1d - 1);
   /// Lower right node in element
   unsigned interior_node_nr_helper_2 = nnode_1d - 1;
   /// Top right node in element
   unsigned interior_node_nr_helper_3 = nnode_1d * nnode_1d - 1;

   // Set up top right corner element
   //--------------------------------
   if ((parent_boundary_x_id == 2) && (parent_boundary_y_id == 1)){

    // Get the number of nodes to be connected on the horizontal boundary
    unsigned n_boundary_x_node = 
     PMLQuad_mesh_x_pt -> nboundary_node(parent_boundary_x_id);
 
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_x_node_pt(n_boundary_x_node);

    // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_x_node; n++)
    {
     ordered_boundary_x_node_pt[n] = 
      PMLQuad_mesh_x_pt -> boundary_node_pt(parent_boundary_x_id, n);
    }
   
    // Sort them from lowest to highest (in x coordinate)
    if (parent_boundary_x_id == 2)
     {
      std::sort(ordered_boundary_x_node_pt.begin(),
                ordered_boundary_x_node_pt.end(),
                 PMLHelper::sorter_top_boundary);
     }
    
    // Get the number of nodes to be connected on the vertical boundary
    unsigned n_boundary_y_node = 
     PMLQuad_mesh_y_pt -> nboundary_node(parent_boundary_y_id);
    
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_y_node_pt(n_boundary_y_node);
    
   // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_y_node; n++)
     {
      ordered_boundary_y_node_pt[n] = 
       PMLQuad_mesh_y_pt -> boundary_node_pt(parent_boundary_y_id, n);
     }
    
    // Sort them
    if (parent_boundary_y_id == 1)
     {
      std::sort(ordered_boundary_y_node_pt.begin(),
                ordered_boundary_y_node_pt.end(),
                 PMLHelper::sorter_right_boundary);
     }
    
    unsigned x_nnod = this -> nboundary_node(current_boundary_x_id);
    for (unsigned j=0;j<x_nnod;j++) 
     {
      this -> boundary_node_pt(current_boundary_x_id,j)->set_obsolete();
     }
    
    unsigned y_nnod = this -> nboundary_node(current_boundary_y_id);
    for (unsigned j=0;j<y_nnod;j++)
     {
      this -> boundary_node_pt(current_boundary_y_id,j)->set_obsolete();
     }
        
    // Kill the obsolete nodes
    this -> prune_dead_nodes();
    
    unsigned n_pml_element = this -> nelement();
    
    // Connect the elements in the pml mesh to the ones
    // in the triangular mesh at element level
    unsigned count = 0;
    
    if (parent_boundary_y_id == 1) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
       // If element is on the right boundary
       if ((e % n_pml_x) == 0) 
        {         
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
         
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
          {
           // If it is one of the ones on the left boundary
           if (e==0)
            {
             if (inod==0) el_pt->node_pt(inod) = special_corner_node_pt;
             if ((inod % nnode_1d == 0) && (inod>0)) {

              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_1) {count--;} 
             }
            } 
           else
           {
            if ((inod % nnode_1d) == 0){
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
             count++;

             // Node between two elements
             if (inod == interior_node_nr_helper_1) {count--;}
            } 
           }
          }
        } 
      }
    }

    count = 0;
    
    if (parent_boundary_x_id == 2) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
      // If element is on the right boundary
       if ((int)(e / n_pml_x) == 0) 
        {       
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
       
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
         {
          if (e==0){
           if (((int) (inod / nnode_1d) == 0 ) && (inod > 0))
            {
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
             count++;

             // Node between two elements
             if (inod == interior_node_nr_helper_2) {count--;} 
            } 
          } else
           {
            if ((int) (inod / nnode_1d) == 0 )
             {
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_2) {count--;} 
             }      
           }
         }
        } 
      }
    }
   }

   // Set up bottom right corner element
   //--------------------------------
   if ((parent_boundary_x_id == 0) && (parent_boundary_y_id == 1)){
    // Get the number of nodes to be connected on the horizontal boundary
    unsigned n_boundary_x_node = 
     PMLQuad_mesh_x_pt -> nboundary_node(parent_boundary_x_id);
 
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_x_node_pt(n_boundary_x_node);

    // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_x_node; n++)
    {
     ordered_boundary_x_node_pt[n] = 
      PMLQuad_mesh_x_pt -> boundary_node_pt(parent_boundary_x_id, n);
    }
   
    // Sort them from lowest to highest (in x coordinate)
    if (parent_boundary_x_id == 0)
     {
      std::sort(ordered_boundary_x_node_pt.begin(),
                ordered_boundary_x_node_pt.end(),
                 PMLHelper::sorter_top_boundary);
     }
    
    // Get the number of nodes to be connected on the vertical boundary
    unsigned n_boundary_y_node = 
     PMLQuad_mesh_y_pt -> nboundary_node(parent_boundary_y_id);
    
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_y_node_pt(n_boundary_y_node);
    
   // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_y_node; n++)
     {
      ordered_boundary_y_node_pt[n] = 
       PMLQuad_mesh_y_pt -> boundary_node_pt(parent_boundary_y_id, n);
     }
    
    // Sort them
    if (parent_boundary_y_id == 1)
     {
      std::sort(ordered_boundary_y_node_pt.begin(),
                ordered_boundary_y_node_pt.end(),
                 PMLHelper::sorter_right_boundary);
     }
    
    unsigned x_nnod = this -> nboundary_node(current_boundary_x_id);
    for (unsigned j=0;j<x_nnod;j++) 
     {
      this -> boundary_node_pt(current_boundary_x_id,j)->set_obsolete();
     }
    
    unsigned y_nnod = this -> nboundary_node(current_boundary_y_id);
    for (unsigned j=0;j<y_nnod;j++)
     {
      this -> boundary_node_pt(current_boundary_y_id,j)->set_obsolete();
     }
    
    // Kill the obsolete nodes
    this -> prune_dead_nodes();
    
    // Get the number of elements in the PML mesh
    unsigned n_pml_element = this -> nelement();
    
    // Connect the elements in the pml mesh to the ones
    // in the triangular mesh at element level
    unsigned count = 0;
    
    if (parent_boundary_y_id == 1) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
       // If element is on the right boundary
       if ((e % n_pml_x) == 0) 
        {         
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
         
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
          {
           if (e==((n_pml_x) * (n_pml_y-1)))
            {
             
             if (inod==interior_node_nr_helper_1) {
              el_pt->node_pt(inod) = special_corner_node_pt;
             } 
             if ((inod%nnode_1d == 0) && (inod<interior_node_nr_helper_1) ) {
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_1) {count--;} 
             }
            } 
           else
           {
            if ((inod % nnode_1d) == 0){
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
             count++;

             // Node between two elements
             if (inod == interior_node_nr_helper_1) {count--;}
            } 
           }
          }
        } 
      }
    }

    count = 0;
    
    if (parent_boundary_x_id == 0) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
      // If element is on the right boundary
       if (e>=((n_pml_x-0) * (n_pml_y-1))) 
        {        
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
       
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
         {
          if (e==((n_pml_x) * (n_pml_y-1))){
           if (((unsigned) (inod / nnode_1d) == interior_node_nr_helper_2 ) 
               && (inod > interior_node_nr_helper_1))
            {
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
             count++;

             // Node between two elements
             if (inod == interior_node_nr_helper_3) {count--;} 
            } 
          } else
           {
            if ((unsigned) (inod / nnode_1d) == interior_node_nr_helper_2 )
             {
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_3) {count--;} 
             }      
           }
         }
        } 
      }
    }
   }
  
   // Set up top left corner element
   //--------------------------------
   if ((parent_boundary_x_id == 2) && (parent_boundary_y_id == 3)){
    // Get the number of nodes to be connected on the horizontal boundary
    unsigned n_boundary_x_node = 
     PMLQuad_mesh_x_pt -> nboundary_node(parent_boundary_x_id);
 
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_x_node_pt(n_boundary_x_node);

    // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_x_node; n++)
    {
     ordered_boundary_x_node_pt[n] = 
      PMLQuad_mesh_x_pt -> boundary_node_pt(parent_boundary_x_id, n);
    }
   
    // Sort them from lowest to highest (in x coordinate)
    if (parent_boundary_x_id == 2)
     {
      std::sort(ordered_boundary_x_node_pt.begin(),
                ordered_boundary_x_node_pt.end(),
                 PMLHelper::sorter_top_boundary);
     }
    
    // Get the number of nodes to be connected on the vertical boundary
    unsigned n_boundary_y_node = 
     PMLQuad_mesh_y_pt -> nboundary_node(parent_boundary_y_id);
    
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_y_node_pt(n_boundary_y_node);
    
   // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_y_node; n++)
     {
      ordered_boundary_y_node_pt[n] = 
       PMLQuad_mesh_y_pt -> boundary_node_pt(parent_boundary_y_id, n);
     }
    
    // Sort them from lowest to highest (in x coordinate)
    if (parent_boundary_y_id == 1)
     {
      std::sort(ordered_boundary_y_node_pt.begin(),
                ordered_boundary_y_node_pt.end(),
                 PMLHelper::sorter_right_boundary);
     }
    
    unsigned x_nnod = this -> nboundary_node(current_boundary_x_id);
    for (unsigned j=0;j<x_nnod;j++) 
     {
      this -> boundary_node_pt(current_boundary_x_id,j)->set_obsolete();
     }
    
    unsigned y_nnod = this -> nboundary_node(current_boundary_y_id);
    for (unsigned j=0;j<y_nnod;j++)
     {
      this -> boundary_node_pt(current_boundary_y_id,j)->set_obsolete();
     }
    
    // Kill the obsolete nodes
    this -> prune_dead_nodes();
  
    // Get the number of elements in the PML mesh
    unsigned n_pml_element = this -> nelement();
    
    // Connect the elements in the pml mesh to the ones
    // in the triangular mesh at element level
    unsigned count = 0;
    
    if (parent_boundary_y_id == 3) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
       // If element is on the right boundary
       if ((e % n_pml_x) == (n_pml_x-1)) 
        {
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
         
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
          {
           if (e==(n_pml_x-1))
            {
             if (inod == interior_node_nr_helper_2) 
              el_pt->node_pt(inod) = special_corner_node_pt;
             if ((inod % nnode_1d == interior_node_nr_helper_2) 
                 && (inod > (nnode_1d - 1))) {

              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_3) {count--;} 
             }
            } 
           else
           {
            if ((inod % nnode_1d) == interior_node_nr_helper_2){
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
             count++;

             // Node between two elements
             if (inod == interior_node_nr_helper_3) {count--;}
            } 
           }
          }
        } 
      }
    }

    count = 0;
    
    if (parent_boundary_x_id == 2) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
      // If element is on the right boundary
       if ((int)(e / n_pml_x) == 0) 
        {        
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
       
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
         {
          // If it is one of the ones on the left boundary
          if (e==(n_pml_x-1)){
           if (((int) (inod / nnode_1d) == 0 ) 
               && (inod < interior_node_nr_helper_2))
            {
             // Get the pointer from the triangular mesh
             el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
             count++;

             // Node between two elements
             if (inod == (nnode_1d - 1)) {count--;} 
            } 
          } else
           {
            if ((int) (inod / nnode_1d) == 0 )
             {
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_2) {count--;} 
             }      
           }
         }
        } 
      }
    }
   }

   // Set up bottom left corner element
   //--------------------------------
   if ((parent_boundary_x_id == 0) && (parent_boundary_y_id == 3)){
    // Get the number of nodes to be connected on the horizontal boundary
    unsigned n_boundary_x_node = 
     PMLQuad_mesh_x_pt -> nboundary_node(parent_boundary_x_id);
    
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_x_node_pt(n_boundary_x_node);
    
    // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_x_node; n++)
     {
      ordered_boundary_x_node_pt[n] = 
       PMLQuad_mesh_x_pt -> boundary_node_pt(parent_boundary_x_id, n);
     }
    
    // Sort them
    if (parent_boundary_x_id == 0)
     {
      std::sort(ordered_boundary_x_node_pt.begin(),
                ordered_boundary_x_node_pt.end(),
                PMLHelper::sorter_top_boundary);
     }
    
    // Get the number of nodes to be connected on the vertical boundary
    unsigned n_boundary_y_node = 
     PMLQuad_mesh_y_pt -> nboundary_node(parent_boundary_y_id);
    
    // Create a vector of ordered boundary nodes
    Vector<Node*> ordered_boundary_y_node_pt(n_boundary_y_node);
    
    // Fill the vector with the nodes on the respective boundary
    for (unsigned n=0; n<n_boundary_y_node; n++)
     {
      ordered_boundary_y_node_pt[n] = 
       PMLQuad_mesh_y_pt -> boundary_node_pt(parent_boundary_y_id, n);
     }
    
    // Sort them 
    if (parent_boundary_y_id == 3)
     {
      std::sort(ordered_boundary_y_node_pt.begin(),
                ordered_boundary_y_node_pt.end(),
                PMLHelper::sorter_right_boundary);
     }
    
    unsigned x_nnod = this -> nboundary_node(current_boundary_x_id);
    for (unsigned j=0;j<x_nnod;j++) 
     {
      this -> boundary_node_pt(current_boundary_x_id,j)->set_obsolete();
     }
    
    unsigned y_nnod = this -> nboundary_node(current_boundary_y_id);
    for (unsigned j=0;j<y_nnod;j++)
     {
      this -> boundary_node_pt(current_boundary_y_id,j)->set_obsolete();
     }
    
    // Kill the obsolete nodes
    this -> prune_dead_nodes();
    
    unsigned n_pml_element = this -> nelement();
    
    // Connect the elements in the pml mesh to the ones
    // in the triangular mesh at element level
    unsigned count = 0;
    
    if (parent_boundary_y_id == 3) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
       // If element is on the right boundary
       if ((e % n_pml_x) == (n_pml_x-1)) 
        {         
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
         
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
          {
           if (e==(n_pml_element-1))
            {  
             if (inod == interior_node_nr_helper_3) {
              el_pt->node_pt(inod) = special_corner_node_pt;
             }
             if ((inod % nnode_1d == interior_node_nr_helper_2) 
                 && (inod < interior_node_nr_helper_3 )) {

              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_3) {count--;} 
             }
            } 
           else
            {
             if ((inod % nnode_1d) == interior_node_nr_helper_2){
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_y_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_3) {count--;}
             } 
            }
          }
        } 
      }
    }
    
    count = 0;
    
    if (parent_boundary_x_id == 0) {
     for(unsigned e=0; e<n_pml_element; e++)
      {
       // If element is on the right boundary
       if (e>=((n_pml_x) * (n_pml_y-1))) 
        {
         // Upcast from GeneralisedElement to Helmholtz bulk element
         ELEMENT *el_pt = dynamic_cast<ELEMENT* >(
          this -> element_pt(e));
         
         // Loop over all nodes in element
         unsigned n_node = el_pt -> nnode();
         for (unsigned inod = 0; inod<n_node; inod++)
          {
           if (e==(n_pml_element-1)){
            if (((unsigned) (inod / nnode_1d) == interior_node_nr_helper_2 ) 
                && (inod < interior_node_nr_helper_3))
             {
              // Get the pointer from the triangular mesh
              el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
              count++;

              // Node between two elements
              if (inod == interior_node_nr_helper_3) {count--;} 
             } 
           } else
            {
             if ((unsigned) (inod / nnode_1d) == interior_node_nr_helper_2 )
              {
               // Get the pointer from the triangular mesh
               el_pt->node_pt(inod) = ordered_boundary_x_node_pt[count];
               count++;

               // Node between two elements
               if (inod == interior_node_nr_helper_3) {count--;} 
              }      
            }
          }
        } 
      }
    }
   } 
  }
};

//=============================================================
/// A class for all isoparametric elements that solve the 
/// Helmholtz equations.
/// \f[ 
/// \frac{\partial^2 u}{\partial x_i^2} = f(x_j) hierher update
/// \f] 
/// This contains the generic maths. Shape functions, geometric
/// mapping etc. must get implemented in derived class.
//=============================================================
template <unsigned DIM>
 class GeneralisedHelmholtzEquations : 
public virtual GeneralisedHelmholtzBase<DIM>,
 public virtual FiniteElement
{

public:

 /// \short Function pointer to source function fct(x,f(x)) -- 
 /// x is a Vector! 
 typedef void (*GeneralisedHelmholtzSourceFctPt)(const Vector<double>& x, 
                                      std::complex<double>& f);

 /// \short Function pointer to soundspeed field -- 
 /// x is a Vector! 
 typedef void (*CFctPt)(const Vector<double>& x, double& f);

 /// \short Function pointer to absorption field -- 
 /// x is a Vector! 
 typedef void (*AlphaFctPt)(const Vector<double>& x, double& f);

 /// Constructor
 GeneralisedHelmholtzEquations() : Source_fct_pt(0),
  Omega_pt(0), C_fct_pt(0), Alpha_fct_pt(0)
  {}


 /// Broken copy constructor
 GeneralisedHelmholtzEquations(const GeneralisedHelmholtzEquations& dummy) 
  { 
   BrokenCopy::broken_copy("GeneralisedHelmholtzEquations");
  } 
 
 /// Broken assignment operator
 void operator=(const GeneralisedHelmholtzEquations&) 
  {
   BrokenCopy::broken_assign("GeneralisedHelmholtzEquations");
  }

 /// \short Return the index at which the unknown value
 /// is stored.
 virtual inline std::complex<unsigned> u_index_helmholtz() const 
 {return std::complex<unsigned>(0,1);}


 /// Get pointer to square of wavenumber
  double*& omega_pt()
  { 
   return Omega_pt;
  }


 /// Get omega 
 double omega()
 { 
#ifdef PARANOID
  if (Omega_pt==0) 
   {
    throw OomphLibError(
     "Please set pointer to omega using access fct to pointer!",
     "GeneralisedHelmholtzEquations<DIM>::omega()",
     OOMPH_EXCEPTION_LOCATION); 
   } 
#endif
  return *Omega_pt;
 }

 /// Output with default number of plot points
 void output(std::ostream &outfile) 
  {
   const unsigned n_plot=5;
   output(outfile,n_plot);
  }

 /// \short Output FE representation of soln: x,y,u_re,u_im or 
 /// x,y,z,u_re,u_im at  n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot);

 /// \short Output function for real part of full time-dependent solution
 /// u = Re( (u_r +i u_i) exp(-i omega t))
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_real(std::ostream &outfile, const double& phi,
                  const unsigned &n_plot);

 /// \short Output function for imaginary part of full time-dependent solution
 /// u = Im( (u_r +i u_i) exp(-i omega t) )
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_imag(std::ostream &outfile, const double& phi,
                  const unsigned &n_plot);

 /// C_style output with default number of plot points
 void output(FILE* file_pt)
  {
   const unsigned n_plot=5;
   output(file_pt,n_plot);
  }

 /// \short C-style output FE representation of soln: x,y,u_re,u_im or 
 /// x,y,z,u_re,u_im at  n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot);

 /// Output exact soln: x,y,u_re_exact,u_im_exact 
 /// or x,y,z,u_re_exact,u_im_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot, 
                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);

 /// \short Output exact soln: (dummy time-dependent version to 
 /// keep intel compiler happy)
 virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                         const double& time, 
                         FiniteElement::UnsteadyExactSolutionFctPt 
                         exact_soln_pt)
  {
   throw OomphLibError(
  "There is no time-dependent output_fct() for GeneralisedHelmholtz elements ",
    "GeneralisedHelmholtzEquations<DIM>::output_fct()",
    OOMPH_EXCEPTION_LOCATION);
  }



 /// \short Output function for real part of full time-dependent fct
 /// u = Re( (u_r +i u_i) exp(-i omega t)
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_real_fct(std::ostream &outfile, 
                      const double& phi,
                      const unsigned &n_plot, 
                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);

 /// \short Output function for imaginary part of full time-dependent fct
 /// u = Im( (u_r +i u_i) exp(-i omega t))
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_imag_fct(std::ostream &outfile, 
                      const double& phi,
                      const unsigned &n_plot, 
                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);
 

 /// Get error against and norm of exact solution
 void compute_error(std::ostream &outfile, 
                    FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
                    double& error, double& norm);


 /// Dummy, time dependent error checker
 void compute_error(std::ostream &outfile, 
                    FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                    const double& time, double& error, double& norm)
  {
   throw OomphLibError(
"There is no time-dependent compute_error() for GeneralisedHelmholtz elements",
    "GeneralisedHelmholtzEquations<DIM>::compute_error()",
    OOMPH_EXCEPTION_LOCATION);
  }


 /// Compute norm of fe solution
 void compute_norm(double& norm);
 
 /// Access function: Pointer to source function
 GeneralisedHelmholtzSourceFctPt& source_fct_pt() {return Source_fct_pt;}

 /// Access function: Pointer to source function. Const version
 GeneralisedHelmholtzSourceFctPt source_fct_pt() const {return Source_fct_pt;}


 /// Get source term at (Eulerian) position x. This function is
 /// virtual to allow overloading in multi-physics problems where
 /// the strength of the source function might be determined by
 /// another system of equations.
 inline virtual void get_source_helmholtz(const unsigned& ipt,
                                          const Vector<double>& x,
                                          std::complex<double>& source) const
  {
   //If no source function has been set, return zero
   if(Source_fct_pt==0) 
    {
     source = std::complex<double>(0.0,0.0);
    }
   else
    {
     // Get source strength
     (*Source_fct_pt)(x,source);
    }
  }

 /// Access function: Pointer to source function
 CFctPt& c_fct_pt() {return C_fct_pt;}

 /// Access function: Pointer to source function. Const version
 CFctPt c_fct_pt() const {return C_fct_pt;}

 /// Get soundspeed term at (Eulerian) position x. This function is
 /// virtual to allow overloading in multi-physics problems where
 /// the strength of the source function might be determined by
 /// another system of equations.
 inline virtual void get_c_helmholtz(const unsigned& ipt,
                                        const Vector<double>& x,
                                        double& c) const
  {
#ifdef PARANOID
   if (C_fct_pt==0) 
    {
     throw OomphLibError(
      "Please set function pointer that sets wave speed.!",
      "GeneralisedHelmholtzEquations<DIM>::get_c_helmholtz()",
      OOMPH_EXCEPTION_LOCATION); 
    } 
#endif

   // Get wave speed
   (*C_fct_pt)(x,c);
  }

 /// Access function: Pointer to source function
 AlphaFctPt& alpha_fct_pt() {return Alpha_fct_pt;}

 /// Access function: Pointer to source function. Const version
 AlphaFctPt alpha_fct_pt() const {return Alpha_fct_pt;}

 /// Get absorption term at (Eulerian) position x. This function is
 /// virtual to allow overloading in multi-physics problems where
 /// the strength of the source function might be determined by
 /// another system of equations.
 inline virtual void get_alpha_helmholtz(const unsigned& ipt,
                                        const Vector<double>& x,
                                        double& alpha) const
  {
   //If no damping function has been set, return zero
   if(Alpha_fct_pt==0) {alpha = 0.0;}
   else
    {
     // Get damping
     (*Alpha_fct_pt)(x,alpha);
    }
  }


 /// Get flux: flux[i] = du/dx_i for real and imag part
 void get_flux(const Vector<double>& s, 
               Vector<std::complex <double> >& flux) const
  {
   //Find out how many nodes there are in the element
   const unsigned n_node = nnode();


   //Set up memory for the shape and test functions
   Shape psi(n_node);
   DShape dpsidx(n_node,DIM);
 
   //Call the derivatives of the shape and test functions
   dshape_eulerian(s,psi,dpsidx);
     
   //Initialise to zero
   const std::complex<double> zero(0.0,0.0);
   for(unsigned j=0;j<DIM;j++)
    {
     flux[j] = zero;
    }
   
   // Loop over nodes
   for(unsigned l=0;l<n_node;l++)
    {
     //Cache the complex value of the unknown
     const std::complex<double> u_value(
      this->nodal_value(l,u_index_helmholtz().real()),
      this->nodal_value(l,u_index_helmholtz().imag()));
     //Loop over derivative directions
     for(unsigned j=0;j<DIM;j++)
      {
       flux[j] += u_value*dpsidx(l,j);
      }
    }
  }


 /// Add the element's contribution to its residual vector (wrapper)
 void fill_in_contribution_to_residuals(Vector<double> &residuals)
  {
   //Call the generic residuals function with flag set to 0
   //using a dummy matrix argument
   fill_in_generic_residual_contribution_helmholtz(
    residuals,GeneralisedElement::Dummy_matrix,0);
  }

 
  //veziaici
 /// \short Add the element's contribution to its residual vector and
 /// element Jacobian matrix (wrapper)
 void fill_in_contribution_to_jacobian(Vector<double> &residuals,
                                   DenseMatrix<double> &jacobian)
  {
   //Call the generic routine with the flag set to 1
    fill_in_generic_residual_contribution_helmholtz(residuals,jacobian,1);
  }
 


 /// \short Return FE representation of function value u_helmholtz(s) 
 /// at local coordinate s
 inline std::complex<double> 
  interpolated_u_generalised_helmholtz(const Vector<double> &s) const
  {
   //Find number of nodes
   const unsigned n_node = nnode();

   //Local shape function
   Shape psi(n_node);

   //Find values of shape function
   shape(s,psi);

   //Initialise value of u
   std::complex<double> interpolated_u(0.0,0.0);

   //Get the index at which the helmholtz unknown is stored
   const unsigned u_nodal_index_real = u_index_helmholtz().real();
   const unsigned u_nodal_index_imag = u_index_helmholtz().imag();
   
   //Loop over the local nodes and sum
   for(unsigned l=0;l<n_node;l++) 
    {
     //Make a temporary complex number from the stored data
     const std::complex<double> u_value(
      this->nodal_value(l,u_nodal_index_real),
      this->nodal_value(l,u_nodal_index_imag));
     //Add to the interpolated value
     interpolated_u += u_value*psi[l];
    }     
   return interpolated_u;
  }


 /// \short Self-test: Return 0 for OK
 unsigned self_test();


protected:

/// \short Compute pml coefficients at position x and integration point ipt
 void compute_pml_coefficients(
  const unsigned& ipt,
  const Vector<double>& x,
  Vector< std::complex<double> >& pml_stiffness_weight,
  std::complex<double>& pml_mass_weight)
 {
  // Cache c
  double c_local=0.0;
  get_c_helmholtz(ipt,x,c_local);

  // Cache alpha
  double alpha_local=0.0;
  get_alpha_helmholtz(ipt,x,alpha_local);

  // Cache omega
  double omega_local = omega();

  // Declare sigma_i and gamma_i vectors of complex numbers for PML weights
  Vector<std::complex<double> > pml_sigma(DIM), pml_gamma(DIM);
 
  if (this->Pml_is_enabled) 
  {
   // Switch on pml in certain directions with a switch of doubles
   // Used in writing down expressions for sigma/gamma - pml functions
   Vector<double> dimension_switch(DIM,0.0);
   for(unsigned k=0; k<DIM; k++) {
    // If PML is enabled in the respective direction
    if (this->Pml_orientation[k] != 0) { dimension_switch[k] = 1.0;}
    /// \short Specific prescribed sigma and gamma function
    /// such that sigma is increasing inside the PML and gamma
    /// incorporates it in a manner adjusting to the frequency
    pml_sigma[k] = std::complex<double> 
     (0.0, 1.0/(std::fabs(this->Pml_outer_boundary[k] - x[k]) )); 
    pml_gamma[k] = 1.0 + dimension_switch[k] * 
     (1.0 / std::complex<double> (omega_local/c_local, alpha_local)) 
     * pml_sigma[k];
   }

   /// \short  for 2D, in order: 
   /// g_y/g_x, g_x/g_y for Laplace bit and g_x*g_y for Helmholtz bit
   /// for 3D, in order: g_y*g_x/g_x, g*x*g_z/g_y, g_x*g_y/g_z for Laplace bit 
   /// and g_x*g_y*g_z for Helmholtz bit
   if (DIM == 2) 
    {
     pml_stiffness_weight[0] = pml_gamma[1] / pml_gamma[0];
     pml_stiffness_weight[1] = pml_gamma[0] / pml_gamma[1];
     pml_mass_weight = pml_gamma[0] * pml_gamma[1];
    } 
   else // if (DIM == 3)
    {
     pml_stiffness_weight[0] = pml_gamma[1] * pml_gamma[2] / pml_gamma[0];
     pml_stiffness_weight[1] = pml_gamma[0] * pml_gamma[2] / pml_gamma[1];
     pml_stiffness_weight[2] = pml_gamma[0] * pml_gamma[1] / pml_gamma[2];
     pml_mass_weight = pml_gamma[0] * pml_gamma[1] * pml_gamma[2];
    }

  }
  else
   {
    /// \short The weights all default to 1.0 as if the propagation 
    /// medium is the physical domain
    pml_stiffness_weight[0] = std::complex<double> (1.0,0.0);
    pml_stiffness_weight[1] = std::complex<double> (1.0,0.0);
    pml_mass_weight = std::complex<double> (1.0,0.0);
   }


 }


 /// \short Shape/test functions and derivs w.r.t. to global coords at 
 /// local coord. s; return  Jacobian of mapping
 virtual double dshape_and_dtest_eulerian_helmholtz(const Vector<double> &s, 
                                                  Shape &psi, 
                                                  DShape &dpsidx, Shape &test, 
                                                  DShape &dtestdx) const=0;
 

 /// \short Shape/test functions and derivs w.r.t. to global coords at 
 /// integration point ipt; return  Jacobian of mapping
 virtual double dshape_and_dtest_eulerian_at_knot_helmholtz(
  const unsigned &ipt, 
  Shape &psi, 
  DShape &dpsidx,
  Shape &test, 
  DShape &dtestdx) const=0;

 /// \short Compute element residual Vector only (if flag=and/or element 
 /// Jacobian matrix 
 virtual void fill_in_generic_residual_contribution_helmholtz(
  Vector<double> &residuals, DenseMatrix<double> &jacobian, 
  const unsigned& flag); 
 
 /// Pointer to source function:
 GeneralisedHelmholtzSourceFctPt Source_fct_pt;

 /// Pointer to frequency (must be set!)
 double* Omega_pt;

 /// \short Pointer to soundspeed field, 
 /// containing the wavespeed distribution across the domain.
 /// (Must be set)
 CFctPt C_fct_pt;

 /// \short Pointer to absorption field, 
 /// containing the absorption distribution across the domain.
 /// If not set we set the damping to zero.
 AlphaFctPt Alpha_fct_pt;

};

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



//======================================================================
/// \short QGeneralisedHelmholtzElement elements are linear/quadrilateral/
/// brick-shaped GeneralisedHelmholtz elements with isoparametric 
/// interpolation for the function.
//======================================================================
template <unsigned DIM, unsigned NNODE_1D>
 class QGeneralisedHelmholtzElement : public virtual QElement<DIM,NNODE_1D>,
 public virtual GeneralisedHelmholtzEquations<DIM>
{

private:

 /// \short Static int that holds the number of variables at 
 /// nodes: always the same
 static const unsigned Initial_Nvalue;
 
  public:


 ///\short  Constructor: Call constructors for QElement and 
 /// GeneralisedHelmholtz equations
 QGeneralisedHelmholtzElement() : 
  QElement<DIM,NNODE_1D>(), GeneralisedHelmholtzEquations<DIM>()
  {}
 
 /// Broken copy constructor
 QGeneralisedHelmholtzElement
  (const QGeneralisedHelmholtzElement<DIM,NNODE_1D>& dummy) 
  { 
   BrokenCopy::broken_copy("QGeneralisedHelmholtzElement");
  } 
 
 /// Broken assignment operator
 void operator=(const QGeneralisedHelmholtzElement<DIM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("QGeneralisedHelmholtzElement");
  }


 /// \short  Required  # of `values' (pinned or dofs) 
 /// at node n
 inline unsigned required_nvalue(const unsigned &n) const 
  {return Initial_Nvalue;}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u
 void output(std::ostream &outfile)
  {GeneralisedHelmholtzEquations<DIM>::output(outfile);}


 ///  \short Output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot)
  {GeneralisedHelmholtzEquations<DIM>::output(outfile,n_plot);}

 /// \short Output function for real part of full time-dependent solution
 /// u = Re( (u_r +i u_i) exp(-i omega t)
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_real(std::ostream &outfile, const double& phi,
                  const unsigned &n_plot)
 {GeneralisedHelmholtzEquations<DIM>::output_real(outfile,phi,n_plot);}

 /// \short Output function for imaginary part of full time-dependent solution
 /// u = Im( (u_r +i u_i) exp(-i omega t))
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_imag(std::ostream &outfile, const double& phi,
                  const unsigned &n_plot)
 {GeneralisedHelmholtzEquations<DIM>::output_imag(outfile,phi,n_plot);}


 /// \short C-style output function:  
 ///  x,y,u   or    x,y,z,u
 void output(FILE* file_pt)
  {GeneralisedHelmholtzEquations<DIM>::output(file_pt);}


 ///  \short C-style output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot)
  {GeneralisedHelmholtzEquations<DIM>::output(file_pt,n_plot);}


 /// \short Output function for an exact solution:
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
  {GeneralisedHelmholtzEquations<DIM>::output_fct(outfile,
                                                  n_plot,
                                                  exact_soln_pt);}


 /// \short Output function for real part of full time-dependent fct
 /// u = Re( (u_r +i u_i) exp(-i omega t)
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_real_fct(std::ostream &outfile, 
                      const double& phi,
                      const unsigned &n_plot, 
                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
 {
  GeneralisedHelmholtzEquations<DIM>::output_real_fct(outfile,
                                                      phi,
                                                      n_plot,
                                                      exact_soln_pt);
 }

 /// \short Output function for imaginary part of full time-dependent fct
 /// u = Im( (u_r +i u_i) exp(-i omega t))
 /// at phase angle omega t = phi.
 /// x,y,u   or    x,y,z,u at n_plot plot points in each coordinate
 /// direction
 void output_imag_fct(std::ostream &outfile, 
                      const double& phi,
                      const unsigned &n_plot, 
                      FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
 {
  GeneralisedHelmholtzEquations<DIM>::output_imag_fct(outfile,
                                                      phi,
                                                      n_plot,
                                                      exact_soln_pt);
 }


 /// \short Output function for a time-dependent exact solution.
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 /// (Calls the steady version)
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 const double& time,
                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
  {GeneralisedHelmholtzEquations<DIM>::output_fct(outfile,
                                                  n_plot,
                                                  time,
                                                  exact_soln_pt);}


protected:

/// Shape, test functions & derivs. w.r.t. to global coords. Return Jacobian.
 inline double dshape_and_dtest_eulerian_helmholtz(
  const Vector<double> &s, Shape &psi, DShape &dpsidx, 
  Shape &test, DShape &dtestdx) const;


 /// \short Shape, test functions & derivs. w.r.t. to global coords. at
 /// integration point ipt. Return Jacobian.
 inline double dshape_and_dtest_eulerian_at_knot_helmholtz(const unsigned& ipt,
                                                         Shape &psi, 
                                                         DShape &dpsidx, 
                                                         Shape &test,
                                                         DShape &dtestdx) 
  const;

};




//Inline functions:


//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NNODE_1D>
 double QGeneralisedHelmholtzElement<DIM,NNODE_1D>::dshape_and_dtest_eulerian_helmholtz(
  const Vector<double> &s,
  Shape &psi, 
  DShape &dpsidx,
  Shape &test, 
  DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 const double J = this->dshape_eulerian(s,psi,dpsidx);

 //Set the test functions equal to the shape functions
 test = psi;
 dtestdx= dpsidx;
 
 //Return the jacobian
 return J;
}




//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NNODE_1D>
double QGeneralisedHelmholtzElement<DIM,NNODE_1D>::
 dshape_and_dtest_eulerian_at_knot_helmholtz(
  const unsigned &ipt,
  Shape &psi, 
  DShape &dpsidx,
  Shape &test, 
  DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 const double J = this->dshape_eulerian_at_knot(ipt,psi,dpsidx);

 //Set the pointers of the test functions
 test = psi;
 dtestdx = dpsidx;

 //Return the jacobian
 return J;
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// Face geometry for the QGeneralisedHelmholtzElement elements: The spatial 
/// dimension of the face elements is one lower than that of the
/// bulk element but they have the same number of points
/// along their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NNODE_1D>
class FaceGeometry<QGeneralisedHelmholtzElement<DIM,NNODE_1D> >: 
 public virtual QElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : QElement<DIM-1,NNODE_1D>() {}

};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


//=======================================================================
/// Face geometry for the 1D QGeneralisedHelmholtzElement elements: 
/// Point elements
//=======================================================================
template<unsigned NNODE_1D>
class FaceGeometry<QGeneralisedHelmholtzElement<1,NNODE_1D> >: 
 public virtual PointElement
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : PointElement() {}

};


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


//==========================================================
/// GeneralisedHelmholtz upgraded to become projectable
//==========================================================
 template<class HELMHOLTZ_ELEMENT>
 class ProjectableGeneralisedHelmholtzElement : 
  public virtual ProjectableElement<HELMHOLTZ_ELEMENT>
 {

 public:


  /// \short Constructor [this was only required explicitly
  /// from gcc 4.5.2 onwards...]
  ProjectableGeneralisedHelmholtzElement(){}

  /// \short Specify the values associated with field fld. 
  /// The information is returned in a vector of pairs which comprise 
  /// the Data object and the value within it, that correspond to field fld. 
  Vector<std::pair<Data*,unsigned> > data_values_of_field(const unsigned& fld)
   { 

#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store 2 fields so fld = "
       << fld << " is illegal \n";
      throw OomphLibError(
       error_stream.str(),
       "ProjectableGeneralisedHelmholtzElement::data_values_of_field()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
  
    // Create the vector
    unsigned nnod=this->nnode();
    Vector<std::pair<Data*,unsigned> > data_values(nnod);
   
    // Loop over all nodes
    for (unsigned j=0;j<nnod;j++)
     {
      // Add the data value associated field: The node itself
      data_values[j]=std::make_pair(this->node_pt(j),fld);
     }
   
    // Return the vector
    return data_values;
   }

  /// \short Number of fields to be projected: 2 (real and imag part)
  unsigned nfields_for_projection()
   {
    return 2;
   }
 
  /// \short Number of history values to be stored for fld-th field. 
  unsigned nhistory_values_for_projection(const unsigned &fld)
  {
#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store two fields so fld = "
       << fld << " is illegal\n";
      throw OomphLibError(
       error_stream.str(),
    "ProjectableGeneralisedHelmholtzElement::nhistory_values_for_projection()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
   return this->node_pt(0)->ntstorage();   
  }
  
  ///\short Number of positional history values
  unsigned nhistory_values_for_coordinate_projection()
   {
    return this->node_pt(0)->position_time_stepper_pt()->ntstorage();
   }
  
  /// \short Return Jacobian of mapping and shape functions of field fld
  /// at local coordinate s
  double jacobian_and_shape_of_field(const unsigned &fld, 
                                     const Vector<double> &s, 
                                     Shape &psi)
   {
#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store two fields so fld = "
       << fld << " is illegal.\n";
      throw OomphLibError(
       error_stream.str(),
       "ProjectableGeneralisedHelmholtzElement::jacobian_and_shape_of_field()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
    unsigned n_dim=this->dim();
    unsigned n_node=this->nnode();
    Shape test(n_node); 
    DShape dpsidx(n_node,n_dim), dtestdx(n_node,n_dim);
    double J=this->dshape_and_dtest_eulerian_helmholtz(s,psi,dpsidx,
                                                       test,dtestdx);
    return J;
   }



  /// \short Return interpolated field fld at local coordinate s, at time level
  /// t (t=0: present; t>0: history values)
  double get_field(const unsigned &t, 
                   const unsigned &fld,
                   const Vector<double>& s)
   {
#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store two fields so fld = "
       << fld << " is illegal\n";
      throw OomphLibError(
       error_stream.str(),
       "ProjectableGeneralisedHelmholtzElement::jget_field()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
    //Find the index at which the variable is stored
    std::complex<unsigned> complex_u_nodal_index = this->u_index_helmholtz();
    unsigned u_nodal_index = 0;
    if (fld==0)
     {
      u_nodal_index = complex_u_nodal_index.real();
     }
    else
     {
      u_nodal_index = complex_u_nodal_index.imag();
     }

    
      //Local shape function
    unsigned n_node=this->nnode();
    Shape psi(n_node);
    
    //Find values of shape function
    this->shape(s,psi);
    
    //Initialise value of u
    double interpolated_u = 0.0;
    
    //Sum over the local nodes
    for(unsigned l=0;l<n_node;l++) 
     {
      interpolated_u += this->nodal_value(t,l,u_nodal_index)*psi[l];
     }
    return interpolated_u;     
   }




  ///Return number of values in field fld: One per node
  unsigned nvalue_of_field(const unsigned &fld)
   {
#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store two fields so fld = "
       << fld << " is illegal\n";
      throw OomphLibError(
       error_stream.str(),
       "ProjectableGeneralisedHelmholtzElement::nvalue_of_field()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
    return this->nnode();
   }

 
  ///Return local equation number of value j in field fld.
  int local_equation(const unsigned &fld,
                     const unsigned &j)
   {
#ifdef PARANOID
    if (fld>1)
     {
      std::stringstream error_stream;
      error_stream 
       << "GeneralisedHelmholtz elements only store two fields so fld = "
       << fld << " is illegal\n";
      throw OomphLibError(
       error_stream.str(),
       "ProjectableGeneralisedHelmholtzElement::local_equation()",
       OOMPH_EXCEPTION_LOCATION);
     }
#endif
    std::complex<unsigned> complex_u_nodal_index = this->u_index_helmholtz();
    unsigned u_nodal_index = 0;
    if (fld==0)
     {
      u_nodal_index = complex_u_nodal_index.real();
     }
    else
     {
      u_nodal_index = complex_u_nodal_index.imag();
     }
    return this->nodal_local_eqn(j,u_nodal_index);     
   }




 /// \short hierher Output FE representation of soln: x,y,u or x,y,z,u at 
 /// n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &nplot)
 {
  HELMHOLTZ_ELEMENT::output(outfile,nplot);
 }
 
   
 };


//=======================================================================
/// Face geometry for element is the same as that for the underlying
/// wrapped element
//=======================================================================
 template<class ELEMENT>
 class FaceGeometry<ProjectableGeneralisedHelmholtzElement<ELEMENT> > 
  : public virtual FaceGeometry<ELEMENT>
 {
 public:
  FaceGeometry() : FaceGeometry<ELEMENT>() {}
 };

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

}

#endif 
