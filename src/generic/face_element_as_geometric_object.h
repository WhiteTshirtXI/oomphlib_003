//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for a class that is used to extract the faces of bulk
//elements and represent them as geometric objects, primarily for use
//in FSI problems

//Include guards to prevent multiple inclusion of the header
#ifndef OOMPH_FACE_ELEMENT_AS_GEOMETRIC_OBJECT_HEADER
#define OOMPH_FACE_ELEMENT_AS_GEOMETRIC_OBJECT_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

#include<algorithm>

//Include the geometric object header file
#include "geom_objects.h"
#include "shape.h"
#include "multi_domain.h"

namespace oomph
{

//=======================================================================
/// Class that is used to create FaceElement from bulk elements and to
/// provide these FaceElement with a geometric object representation.
/// The local coordinates of the FaceElements are used as the intrinisic
/// coordinates for its GeomObject representation.
/// \n\n
/// These elements are used primarily to set up the interaction terms
/// in FSI problems and are expected to be created from meshes so 
/// that they lie on a particular boundary of the mesh.
//=======================================================================
template<class ELEMENT>
class FaceElementAsGeomObject : public virtual FaceGeometry<ELEMENT>,
 public virtual FaceElement,
 public virtual ElementWithExternalElement
 {
public:

 ///\short Constructor which takes a pointer to a "bulk" element,
 /// to which this element is attached. The face index, indicates
 /// the face (of the bulk element) that is to be constructed.
 /// Note that this element tends to be constructed  
 /// by the doubly templated Mesh::build_face_mesh() and therefore
 /// has to have the same interface as the the generic FaceElement
 /// constructor. Hence the boundary number (within the mesh) on which this 
 /// element is located must be setup afterwards!
 FaceElementAsGeomObject(FiniteElement* const &element_pt, 
                         const int &face_index) :
  FaceGeometry<ELEMENT>(), FaceElement(), 
  //The geometric object has an intrinsic dimension one less than 
  //the "bulk" element, but the actual dimension of the problem remains 
  //the same
  //GeomObject(element_pt->dim()-1,element_pt->nodal_dimension()),
  ElementWithExternalElement()
  { 
   //Attach the geometrical information to the element. N.B. This function
   //also assigns nbulk_value from the required_nvalue of the bulk element
   element_pt->build_face_element(face_index,this);
   GeomObject::set_nlagrangian_and_ndim(element_pt->dim()-1,
                                        element_pt->nodal_dimension());
  }


 /// Broken copy constructor
 FaceElementAsGeomObject(const FaceElementAsGeomObject&) 
  { 
   BrokenCopy::broken_copy("FaceElementAsGeomObject");
  } 
 
 /// Broken assignment operator
 void operator=(const FaceElementAsGeomObject&) 
  {
   BrokenCopy::broken_assign("FaceElementAsGeomObject");
  }
 
 /// \short The "global" intrinsic coordinate of the element when
 /// viewed as part of a geometric object should be given by
 /// the FaceElement representation, by default
 double zeta_nodal(const unsigned &n, const unsigned &k,           
                          const unsigned &i) const 
  {return FaceElement::zeta_nodal(n,k,i);}     


 /// \short How many items of Data does the shape of the object depend on?
 /// None! We're dealing with a pure geometric FiniteElement!
 unsigned ngeom_data() const {return 0;}
 
 /// \short Return pointer to the j-th Data item that the object's 
 /// shape depends on. Object doesn't depend on any geom Data
 /// so we die if this gets called.
 Data* geom_data_pt(const unsigned& j)
  {
   std::ostringstream error_message;
   error_message 
    << "FaceElementAsGeomObject::geom_data_pt() is deliberately broken\n"
    << "as it does not depend on any geometric Data" << std::endl;
    throw OomphLibError(error_message.str(),
                        "FaceElementAsGeomObject::geom_data_pt()",
                        OOMPH_EXCEPTION_LOCATION);
    // Dummy return
    return 0;
  }

 /// Override fill in contribution to jacobian, nothing should be done
 void fill_in_contribution_to_jacobian(Vector<double> &residuals,
                                       DenseMatrix<double> &jacobian) 
  {
   std::ostringstream warn_message;
   warn_message
    << "Warning: You have just called the empty function \n"
    << 
    "fill_in_contribution_to_jacobian() for a FaceElementAsGeometricObject.\n"
    << 
    "These Elements should only be used to setup interactions, so should\n"
    << 
    "not be included in any jacobian calculations\n";
   
   OomphLibWarning(
    warn_message.str(),
    "FaceElementAsGeometricObject::fill_in_contribution_to_jacobian()",
    OOMPH_EXCEPTION_LOCATION);
  }


 /// Unique final overrider needed for assign_all_generic_local_eqn_numbers
 void assign_all_generic_local_eqn_numbers()
  {
   // Call the ElementWithExternalElement's assign function
   ElementWithExternalElement::assign_all_generic_local_eqn_numbers();
  }
 

};

}

#endif
